# Docker Compose configuration for Skippy Trading Platform
# Production-ready setup with PostgreSQL, Redis, monitoring

version: '3.8'

services:
  # Main Skippy Application
  skippy-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: skippy-trading-platform
    restart: unless-stopped
    ports:
      - "${PORT:-5000}:5000"
    environment:
      # Application Configuration
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 5000
      BUILD_SHA: ${BUILD_SHA:-latest}
      
      # Database Configuration
      DATABASE_URL: ${DATABASE_URL:-postgresql://skippy:${POSTGRES_PASSWORD}@postgres:5432/skippy}
      PGHOST: postgres
      PGPORT: 5432
      PGUSER: ${POSTGRES_USER:-skippy}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      PGDATABASE: ${POSTGRES_DB:-skippy}
      
      # Authentication & Security
      SESSION_SECRET: ${SESSION_SECRET}
      ADMIN_SECRET: ${ADMIN_SECRET}
      REPL_ID: ${REPL_ID}
      ISSUER_URL: ${ISSUER_URL:-https://replit.com/oidc}
      REPLIT_DOMAINS: ${REPLIT_DOMAINS}
      
      # Trading Configuration
      LIVE_TRADING_ENABLED: ${LIVE_TRADING_ENABLED:-false}
      EXCHANGE_API_KEY: ${EXCHANGE_API_KEY}
      EXCHANGE_API_SECRET: ${EXCHANGE_API_SECRET}
      
      # AI Services
      AI_SERVICES_ENABLED: ${AI_SERVICES_ENABLED:-true}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # Feature Flags
      FEATURE_BACKTEST: ${FEATURE_BACKTEST:-true}
      FEATURE_TRADING: ${FEATURE_TRADING:-true}
      FEATURE_AI_CHAT: ${FEATURE_AI_CHAT:-true}
      
      # Monitoring & Alerts
      PROMETHEUS_ENABLED: ${PROMETHEUS_ENABLED:-true}
      SLACK_BOT_TOKEN: ${SLACK_BOT_TOKEN}
      SLACK_CHANNEL_ID: ${SLACK_CHANNEL_ID}
      ALERT_WEBHOOK_URL: ${ALERT_WEBHOOK_URL}
      
      # Performance Tuning
      CLUSTER_ENABLED: ${CLUSTER_ENABLED:-false}
      WORKER_THREADS: ${WORKER_THREADS:-4}
      MAX_CONNECTIONS: ${MAX_CONNECTIONS:-100}
      
    volumes:
      - skippy-logs:/app/logs
      - skippy-models:/app/models
      - skippy-reports:/app/simulation-reports
      - skippy-tmp:/app/tmp
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - skippy-network
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: skippy-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-skippy}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-skippy}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - skippy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-skippy} -d ${POSTGRES_DB:-skippy}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres 
      -c max_connections=200
      -c shared_buffers=128MB
      -c effective_cache_size=512MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.7
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # Redis for Caching and Session Storage
  redis:
    image: redis:7-alpine
    container_name: skippy-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - skippy-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    command: redis-server /usr/local/etc/redis/redis.conf --appendonly yes

  # Prometheus Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: skippy-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./docker/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml
    networks:
      - skippy-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: skippy-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - skippy-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # AlertManager for Prometheus Alerts (Optional)
  alertmanager:
    image: prom/alertmanager:latest
    container_name: skippy-alertmanager
    restart: unless-stopped
    ports:
      - "${ALERTMANAGER_PORT:-9093}:9093"
    volumes:
      - alertmanager-data:/alertmanager
      - ./docker/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    networks:
      - skippy-network
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    profiles:
      - monitoring

# Named Volumes for Persistent Storage
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  skippy-logs:
    driver: local
  skippy-models:
    driver: local
  skippy-reports:
    driver: local
  skippy-tmp:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  alertmanager-data:
    driver: local

# Network Configuration
networks:
  skippy-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16